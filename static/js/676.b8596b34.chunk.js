"use strict";(self.webpackChunkdevranbir=self.webpackChunkdevranbir||[]).push([[676],{676:(e,t,r)=>{r.d(t,{default:()=>o});var a=r(220),n=r(299);class i{constructor(){this.baseURL="https://api.github.com",this.token=null,this.tokenLoaded=!1,this.tokenLoadingPromise=null}static getTokenDocRef(){return(0,a.doc)(n.db,"website-content","github-token")}async loadToken(){return this.tokenLoaded&&this.token?this.token:(this.tokenLoadingPromise||(this.tokenLoadingPromise=(async()=>{try{const e=await(0,a.getDoc)(i.getTokenDocRef());return e.exists()&&e.data().token?(this.token=e.data().token,this.tokenLoaded=!0,console.log("GitHub token loaded from Firestore:"),this.token):(this.token=null,this.tokenLoaded=!1,null)}catch(e){return console.error("Error loading GitHub token from Firestore:",e),this.token=null,this.tokenLoaded=!1,null}finally{this.tokenLoadingPromise=null}})()),this.tokenLoadingPromise)}static async setToken(e){try{return await(0,a.setDoc)(i.getTokenDocRef(),{token:e}),!0}catch(t){return console.error("Error setting GitHub token in Firestore:",t),!1}}async getHeaders(){this.tokenLoaded&&this.token||await this.loadToken();const e={Accept:"application/vnd.github.v3+json","Content-Type":"application/json"};return this.token&&(e.Authorization=`token ${this.token}`),e}async getPinnedRepositories(e){try{const t=`\n        query {\n          user(login: "${e}") {\n            pinnedItems(first: 6, types: [REPOSITORY]) {\n              edges {\n                node {\n                  ... on Repository {\n                    id\n                    name\n                    description\n                    url\n                    homepageUrl\n                    createdAt\n                    updatedAt\n                    stargazerCount\n                    forkCount\n                    primaryLanguage {\n                      name\n                    }\n                    repositoryTopics(first: 20) {\n                      edges {\n                        node {\n                          topic {\n                            name\n                          }\n                        }\n                      }\n                    }\n                    isPrivate\n                    isFork\n                    defaultBranchRef {\n                      name\n                    }\n                    diskUsage\n                  }\n                }\n              }\n            }\n          }\n        }\n      `,r=await this.getHeaders(),a=await fetch("https://api.github.com/graphql",{method:"POST",headers:r,body:JSON.stringify({query:t})});if(!a.ok)throw new Error(`GitHub GraphQL API error: ${a.status} ${a.statusText}`);const n=await a.json();if(n.errors)throw new Error(`GraphQL errors: ${n.errors.map(e=>e.message).join(", ")}`);return n.data.user.pinnedItems.edges.map(e=>{var t,r;const a=e.node;return{id:parseInt(a.id.replace("MDEwOlJlcG9zaXRvcnk=",""),10)||Date.now(),name:a.name,description:a.description,html_url:a.url,homepage:a.homepageUrl,created_at:a.createdAt,updated_at:a.updatedAt,stargazers_count:a.stargazerCount,forks_count:a.forkCount,language:null===(t=a.primaryLanguage)||void 0===t?void 0:t.name,topics:a.repositoryTopics.edges.map(e=>e.node.topic.name),private:a.isPrivate,fork:a.isFork,default_branch:(null===(r=a.defaultBranchRef)||void 0===r?void 0:r.name)||"main",size:a.diskUsage||0,isPinned:!0}})}catch(t){return console.error("Error fetching pinned repositories:",t),[]}}async getUserRepositories(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};try{const{type:r="owner",sort:a="updated",direction:n="asc",per_page:i=100,page:o=1}=t,s=new URLSearchParams({type:r,sort:a,direction:n,per_page:i.toString(),page:o.toString()}),d=`${this.baseURL}/users/${e}/repos?${s}`,l=await this.getHeaders(),c=await fetch(d,{headers:l});if(!c.ok){if(404===c.status)throw new Error(`User not found: ${e}`);throw new Error(`GitHub API error: ${c.status} ${c.statusText}`)}return await c.json()}catch(r){throw console.error("Error fetching user repositories:",r),r}}async getMyRepositories(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};try{const{visibility:t="all",affiliation:r="owner",type:a="owner",sort:n="updated",direction:i="desc",per_page:o=100,page:s=1}=e,d=new URLSearchParams({visibility:t,affiliation:r,type:a,sort:n,direction:i,per_page:o.toString(),page:s.toString()}),l=`${this.baseURL}/user/repos?${d}`,c=await this.getHeaders(),u=await fetch(l,{headers:c});if(!u.ok){if(401===u.status)throw new Error("Unauthorized: Please check your GitHub token");throw new Error(`GitHub API error: ${u.status} ${u.statusText}`)}return await u.json()}catch(t){throw console.error("Error fetching my repositories:",t),t}}convertRepoToProject(e){const t=this.determineProjectType(e.language,e.topics||[]);return{id:`github-${e.id}`,name:e.name,type:t,repoUrl:e.html_url,liveUrl:e.homepage||"",description:e.description||"",dateAdded:e.created_at?new Date(e.created_at).toISOString().split("T")[0]:(new Date).toISOString().split("T")[0],isFromGitHub:!0,isPinned:e.isPinned||!1,githubData:{stars:e.stargazers_count,forks:e.forks_count,language:e.language,topics:e.topics||[],updated_at:e.updated_at,size:e.size,default_branch:e.default_branch,is_private:e.private,is_fork:e.fork,isPinned:e.isPinned||!1}}}determineProjectType(e,t){const r=new Set(t.map(e=>e.toLowerCase()));if(r.has("react")||r.has("vue")||r.has("angular")||r.has("web")||r.has("frontend")||r.has("website"))return"web";if(r.has("mobile")||r.has("android")||r.has("ios")||r.has("react-native")||r.has("flutter"))return"mobile";if(r.has("desktop")||r.has("electron")||r.has("gui"))return"desktop";if(r.has("ai")||r.has("ml")||r.has("machine-learning")||r.has("deep-learning")||r.has("neural-network")||r.has("tensorflow")||r.has("pytorch"))return"ai";if(r.has("blockchain")||r.has("cryptocurrency")||r.has("bitcoin")||r.has("ethereum")||r.has("web3"))return"blockchain";if(e){const t=e.toLowerCase();if("javascript"===t||"typescript"===t||"html"===t||"css"===t||"scss"===t||"vue"===t||"svelte"===t)return"web";if("swift"===t||"kotlin"===t||"java"===t||"dart"===t)return"mobile";if("c++"===t||"c#"===t||"c"===t||"rust"===t||"go"===t||"java"===t)return"desktop";if("python"===t||"r"===t||"jupyter notebook"===t)return"ai";if("solidity"===t)return"blockchain"}return"web"}sortRepositories(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"pinned",r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"desc";return[...e].sort((e,a)=>{var n,i,o,s,d,l,c,u,h,p;let g,k;switch(t){case"pinned":if(e.isPinned&&!a.isPinned)return-1;if(!e.isPinned&&a.isPinned)return 1;var f,v,b,m;if(e.isPinned&&a.isPinned)g=(null===(f=e.githubData)||void 0===f?void 0:f.stars)||0,k=(null===(v=a.githubData)||void 0===v?void 0:v.stars)||0;else g=(null===(b=e.githubData)||void 0===b?void 0:b.stars)||0,k=(null===(m=a.githubData)||void 0===m?void 0:m.stars)||0;break;case"stars":g=(null===(n=e.githubData)||void 0===n?void 0:n.stars)||0,k=(null===(i=a.githubData)||void 0===i?void 0:i.stars)||0;break;case"forks":g=(null===(o=e.githubData)||void 0===o?void 0:o.forks)||0,k=(null===(s=a.githubData)||void 0===s?void 0:s.forks)||0;break;case"updated":g=new Date((null===(d=e.githubData)||void 0===d?void 0:d.updated_at)||e.dateAdded),k=new Date((null===(l=a.githubData)||void 0===l?void 0:l.updated_at)||a.dateAdded);break;case"created":g=new Date(e.dateAdded),k=new Date(a.dateAdded);break;case"name":g=e.name.toLowerCase(),k=a.name.toLowerCase();break;case"size":g=(null===(c=e.githubData)||void 0===c?void 0:c.size)||0,k=(null===(u=a.githubData)||void 0===u?void 0:u.size)||0;break;case"language":g=(null===(h=e.githubData)||void 0===h?void 0:h.language)||"zzz",k=(null===(p=a.githubData)||void 0===p?void 0:p.language)||"zzz";break;case"type":g=e.type,k=a.type;break;default:return 0}return"string"===typeof g&&"string"===typeof k?"asc"===r?g.localeCompare(k):k.localeCompare(g):(g instanceof Date&&Date,"asc"===r?g-k:k-g)})}async getRepositoriesAsProjects(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};try{let r,a=[];e?(a=await this.getPinnedRepositories(e),r=await this.getUserRepositories(e,t)):r=await this.getMyRepositories(t);const n=new Set(a.map(e=>e.name));r=r.map(e=>({...e,isPinned:n.has(e.name)}));const i=new Set(r.map(e=>e.name)),o=a.filter(e=>!i.has(e.name));r=[...r,...o];const{excludeForks:s=!0,excludePrivate:d=!1,minStars:l=0,excludeTopics:c=[],includeTopics:u=[],sortBy:h="pinned",sortDirection:p="desc"}=t;let g=r;s&&(g=g.filter(e=>!e.fork)),d&&(g=g.filter(e=>!e.private)),l>0&&(g=g.filter(e=>e.stargazers_count>=l)),c.length>0&&(g=g.filter(e=>{const t=e.topics||[];return!c.some(e=>t.includes(e))})),u.length>0&&(g=g.filter(e=>{const t=e.topics||[];return u.some(e=>t.includes(e))}));const k=g.map(e=>this.convertRepoToProject(e));return this.sortRepositories(k,h,p)}catch(r){throw console.error("Error fetching repositories as projects:",r),r}}getSortingOptions(){return[{value:"pinned",label:"Pinned First"},{value:"stars",label:"Stars"},{value:"forks",label:"Forks"},{value:"updated",label:"Recently Updated"},{value:"created",label:"Recently Created"},{value:"name",label:"Name"},{value:"size",label:"Size"},{value:"language",label:"Language"},{value:"type",label:"Project Type"}]}async isTokenConfigured(){return await this.loadToken(),!!this.token}async getRateLimit(){try{const e=`${this.baseURL}/rate_limit`,t=await fetch(e,{headers:this.getHeaders()});if(!t.ok)throw new Error(`GitHub API error: ${t.status} ${t.statusText}`);return await t.json()}catch(e){throw console.error("Error fetching rate limit:",e),e}}async getRepositoriesWithCustomSort(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;const t={...arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},sortBy:arguments.length>1&&void 0!==arguments[1]?arguments[1]:"pinned",sortDirection:arguments.length>2&&void 0!==arguments[2]?arguments[2]:"desc"};return await this.getRepositoriesAsProjects(e,t)}}const o=new i}}]);